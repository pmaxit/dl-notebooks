#AUTOGENERATED! DO NOT EDIT! File to edit: dev/04_vae.ipynb (unless otherwise specified).

__all__ = ['Flatten', 'UnFlatten', 'VAE', 'vae_loss']

#Cell

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import matplotlib.pyplot as plt
import re

#Cell

class Flatten(nn.Module):
    def forward(self, input):
        return input.view(input.size(0), -1)

class UnFlatten(nn.Module):
    def forward(self, input):
        return input.view(-1, 64, 7, 7)

#Cell

class VAE(nn.Module):
    def __init__(self, latent_size):
        super(VAE, self).__init__()

        self.latent_size = latent_size

        self.encoder = nn.Sequential(
            nn.Conv2d(1, 32, 4, 1, 2),
            nn.ReLU(True),
            nn.Conv2d(32, 32, 4, 2, 1),
            nn.ReLU(True),
            nn.Conv2d(32, 64, 4, 2, 1),
            nn.ReLU(),
            Flatten()
        )

        self.mu = nn.Linear(64*7*7, latent_size)
        self.logvar = nn.Linear(64*7*7, latent_size)

        self.upsample = nn.Linear(latent_size, 64*7*7)
        self.decoder = nn.Sequential(
            UnFlatten(),
            nn.ConvTranspose2d(64, 32, 4, 2, 1),
            nn.ReLU(),
            nn.ConvTranspose2d(32, 32, 4, 2, 1, 1),
            nn.ReLU(True),
            nn.ConvTranspose2d(32, 1, 4, 1 , 2),
            nn.Sigmoid()
        )

    def bottleneck(self, h):
        mu, logvar = self.mu(h), self.logvar(h)
        z = self.reparametrize(mu, logvar)
        return z, mu, logvar

    def encode(self, x):
        h = self.encoder(x)
        z, mu, logvar = self.bottleneck(h)
        return z, mu, logvar

    def decode(self, z):
        z = self.upsample(z)
        z = self.decoder(z)
        return z

    def reparametrize(self, mu, logvar):
        if self.training:
            std = torch.exp(0.5*logvar) + 1e-8
            eps = torch.randn_like(std)
            return eps.mul(std).add_(mu)
        else:
            return mu

    def forward(self, x):
        z, mu, logvar = self.encode(x)
        z = self.decode(z)
        return z, mu, logvar

#Cell

def vae_loss(x_pred, x_orig):

    x, z_mu, z_var = x_pred

    recon_loss = F.binary_cross_entropy(x, x_orig, reduction='sum')

    # KL divergence loss
    KLD = -0.5 * torch.sum(1 + z_var - z_mu.pow(2) - z_var.exp())

    # total_loss
    loss = recon_loss + KLD
    
    return loss