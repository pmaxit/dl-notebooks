# AUTOGENERATED! DO NOT EDIT! File to edit: 01_simpleCNN.ipynb (unless otherwise specified).

__all__ = ['SimpleCNN']

# Cell

from fastai2.basics import *
from fastai2.callback.all import *
from fastai2.vision.all import *

from fastai2.data.all import *
from fastai2.vision.core import *
from fastai2.vision.data import *

# Cell
class SimpleCNN(nn.Module):
    def __init__(self, *args, **kwargs):
        """ Basic ConvNet """
        super().__init__(*args, **kwargs)

        # 3 X 32 X 32 -> 64 x 32 x 32
        # first layer always increases the dimensions to large number.
        # usually it involves using larger filter size or successive convolution

        self.conv1 = nn.Conv2d(3, 64, 5 , padding=3)
        # Here padding 1 helps it to keep same size
        self.conv2 = nn.Sequential(
            nn.Conv2d(64, 128, 3, padding=1),
            nn.MaxPool2d(2)
        )
        self.conv3 = nn.Sequential(
            nn.Conv2d(128, 256, 3, padding=1),
            nn.MaxPool2d(2)
        )

        self.conv_out = nn.Conv2d(256, 10, 3, padding=1)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        x = F.relu(self.conv3(x))
        x = F.relu(self.conv_out(x))
        x = F.avg_pool2d(x, 8)  # Global average pooling on 10 x 8 x 8 -> 10 x 1 x 1
        x = x.view(x.size(0), -1)
        return F.log_softmax(x,dim=0)
